# Built-in default settings for SMS Scheduler
#
# The settings in this file apply regardless of active profile, and are overriden
# first by the application-{dev,test,prod}.properties in the JAR (depending on
# active profile) and then by any application[-*].properties found at runtime in
# PWD or PWD/config.

# We set the default profile to 'dev', which is absent from the JAR (it sits in
# src/test/resources), so that real deployments will error out unless they set
# the test or prod profile (--spring.profiles.active or SPRING_PROFILES_ACTIVE).
#
spring.profiles.active=dev

# General Spring Boot settings
#spring.application.name=sms-scheduler

# Embedded Tomcat settings
#server.port=8282
#server.address=127.0.0.1
#server.servlet.context-path=/
#server.tomcat.threads.max=64
#server.use-forward-headers=true

# Time zone to use when formmating date-times (default is 'Z' is UTC)
#sms.scheduler.app.time-zone=+03:00

# Enable JEP444 virtual threads
spring.threads.virtual.enabled=true

# BPMN process parameters
# Max random delay for initial send (to not burst batches to the backend)
#sms.scheduler.config.max-add-jitter=
# Max duration to wait for send ack after initial queued send
#sms.scheduler.config.ack-send-timeout=
# Duration to wait before resending after failure
#sms.scheduler.config.wait-after-fail=
# Duration to wait for recv ack after sending
#sms.scheduler.config.ack-recv-timeout=

# Controls output of the processLogger eventListener in the model
#sms.scheduler.diag.processes.enabled=false
#sms.scheduler.diag.processes.detailed=false

# Kafka
#spring.kafka.bootstrap-servers=localhost:9292
spring.kafka.consumer.group-id=${spring.application.name}

# Database config
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.url=jdbc:mem:sms-scheduler-db
#spring.datasource.username=
#spring.datasource.password=@SET_ME@

# Connection pool (see https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby)
spring.datasource.hikari.poolName=${spring.application.name}
spring.datasource.hikari.maxLifetime=600000
spring.datasource.hikari.idleTimeout=300000
spring.datasource.hikari.minimumIdle=10
spring.datasource.hikari.maximumPoolSize=50
spring.datasource.hikari.connection-test-query=select 1

# REST
server.error.include-message=always
#server.error.include-stacktrace=on-param
#server.error.include-binding-errors=on-param

# Flowable async settings (documentated below in "Archived")
flowable.process.async-executor-activate=true
#flowable.process.async.executor.default-async-job-acquire-wait-time=10s
#flowable.process.async.executor.async-job-lock-time=5m
#flowable.process.async.executor.default-timer-job-acquire-wait-time=10s
#flowable.process.async.executor.timer-lock-time=5m

# Spring task executor
spring.task.execution.pool.core-size=32
spring.task.execution.pool.max-size=32
spring.task.execution.pool.queue-capacity=1000
spring.task.execution.thread-name-prefix=${spring.application.name}-task-executor-

# Task scheduling
spring.task.scheduling.pool.size=5

# Actuator endpoint
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=when_authorized
management.endpoint.health.roles=admins

# Flowable says "needed to force use of JDK proxies instead of using CGLIB"
spring.aop.proxy-target-class=false
spring.aop.auto=false

# LOGGING -----------------------------------------------------------------------------------------

# See https://docs.spring.io/spring-boot/docs/2.7.9/reference/html/features.html#features.logging)
#debug=true (same as running with --debug, enables DEBUG level on a number of core loggers)
#trace=true (same as running with --trace, enables TRACE level on a number of core loggers)
logging.level.root=INFO

# Process event loggers
# Keep at INFO or lower and turn on/off using the sms.scheduler.diag.* properties
logging.level.it.zwets.sms.scheduler.diag=INFO

# SMS Scheduler
#logging.level.it.zwets.sms=INFO
#logging.level.it.zwets.sms.scheduler=INFO
#logging.level.it.zwets.sms.scheduler.iam=INFO

# Flowable
#logging.level.org.flowable=INFO

# Kafka
#logging.level.org.apache.kafka=INFO

# Camel
#logging.level.org.apache.camel=INFO

# Spring
#logging.level.org.springframework=INFO

# NOISY LOGGERS you (nearly) always want to silence
logging.level.liquibase=WARN
logging.level.org.apache.kafka.clients.NetworkClient=ERROR
logging.level.org.apache.kafka.clients.consumer.internals=WARN
logging.level.org.apache.kafka.clients.consumer.ConsumerConfig=WARN
logging.level.org.apache.kafka.clients.producer.ProducerConfig=WARN
logging.level.org.flowable.engine.impl.interceptor=WARN
logging.level.org.flowable.engine.impl.persistence.entity=WARN
logging.level.org.flowable.eventregistry.impl.persistence.entity=WARN
logging.level.org.flowable.common.engine.impl.agenda.AbstractAgenda=WARN
logging.level.org.flowable.common.engine.impl.db=WARN
logging.level.org.flowable.common.engine.impl.interceptor.LogInterceptor=WARN
logging.level.org.flowable.common.engine.impl.persistence.entity=WARN
logging.level.org.flowable.common.engine.impl.interceptor=WARN
logging.level.org.flowable.common.engine.impl.agenda=WARN
logging.level.org.flowable.common.spring.SpringTransactionInterceptor=WARN
logging.level.org.flowable.idm.spring.SpringTransactionInterceptor=WARN
logging.level.org.flowable.job.service.impl.asyncexecutor=WARN
logging.level.org.flowable.job.service.impl.asyncexecutor.AcquireTimerJobsRunnable=WARN
logging.level.org.flowable.job.service.impl.persistence.entity.TimerJobEntityImpl=WARN
logging.level.org.flowable.job.service.impl.persistence.entity.JobEntityImpl=WARN

# ARCHIVED - Flowable Settings --------------------------------------------------------------------

# More actuator settings
#management.endpoint.flowable.cache.time-to-live=0ms # Maximum time that a response can be cached.
#management.endpoint.flowable.enabled=true # Whether to enable the flowable endpoint.
# Add arbitrary properties to the info endpoint
#management.info.env.enabled=true
#info.my-custom-prop=${spring.application.name:unknown}

# Mail
#flowable.mail.server.default-from=
#flowable.mail.server.force-to=me@example.org
#flowable.mail.server.host=localhost
#flowable.mail.server.port=25
#flowable.mail.server.ssl-port=1465
#flowable.mail.server.use-ssl=false
#flowable.mail.server.use-tls=false
#flowable.mail.server.username=
#flowable.mail.server.password=

# Core (Process) https://github.com/flowable/flowable-engine/tree/main/modules/flowable-spring-boot/flowable-spring-boot-starters/flowable-spring-boot-autoconfigure/src/main/java/org/flowable/spring/boot/FlowableProperties.java
#flowable.check-process-definitions=true # Whether process definitions need to be auto deployed.
#flowable.custom-mybatis-mappers= # The FQN of custom Mybatis mappers that need to be added to the engine.
#flowable.custom-mybatis-x-m-l-mappers= # The location of the custom Mybatis XML Mappers that need to be added to the engine.
#flowable.database-schema= # In some situations you want to set the schema to use for table checks / generation if the database metadata doesn't return that correctly.
#flowable.database-schema-update=true # The strategy that should be used for the database schema.
#flowable.db-history-used=true # Whether db history should be used.
#flowable.deployment-name=SpringBootAutoDeployment # The name of the auto deployment.
#flowable.history-level=audit # The history level that needs to be used.
#flowable.process-definition-location-prefix=classpath*:/processes/ # The folder in which processes need to be searched for auto deployment.
#flowable.process-definition-location-suffixes=**.bpmn20.xml,**.bpmn # The suffixes (extensions) of the files that needs to be deployed from the 'processDefinitionLocationPrefix' location.

# Process https://github.com/flowable/flowable-engine/tree/main/modules/flowable-spring-boot/flowable-spring-boot-starters/flowable-spring-boot-autoconfigure/src/main/java/org/flowable/spring/boot/process/FlowableProcessProperties.java
#flowable.process.async-executor-activate=true
#flowable.process.definition-cache-limit=-1 # The maximum amount of process definitions available in the process definition cache. Per default it is -1 (all process definitions).
#flowable.process.enable-safe-xml=true # Enables extra checks on the BPMN xml that is parsed. Unfortunately, this feature is not available on some platforms, hence you need to disable if your platform does not allow the use of StaxSource during XML parsing.
#flowable.process.servlet.load-on-startup=-1 # Load on startup of the Process dispatcher servlet.
#flowable.process.servlet.name=Flowable BPMN Rest API # The name of the Process servlet.
#flowable.process.servlet.path=/process-api # The context path for the Process rest servlet.

# Process Async Executor
#flowable.process.async-executor-activate=true
# The amount of time an async job is locked when acquired by the async executor. During this period of time, no other async executor will try to acquire and lock this job.
#flowable.process.async.executor.async-job-lock-time=PT5M
# The time the timer job acquisition thread will wait to execute the next acquirement query. This happens when no new timer jobs were found or when less async jobs have been fetched. Default value = 10 seconds.
#flowable.process.async.executor.default-async-job-acquire-wait-time=PT10S
# The time the async job (both timer and async continuations) acquisition thread will wait when the queue is full to execute the next query.
#flowable.process.async.executor.default-queue-size-full-wait-time=PT5S
# The time the timer job acquisition thread will wait to execute the next acquirement query. This happens when no new timer jobs were found or when less async jobs have been fetched. Default value = 10 seconds.
#flowable.process.async.executor.default-timer-job-acquire-wait-time=PT10S
# The amount of time a timer job is locked when acquired by the async executor. During this period of time, no other async executor will try to acquire and lock this job.
#flowable.process.async.executor.timer-lock-time=PT5M
# Documentation missing
#flowable.process.async.executor.max-async-jobs-due-per-acquisition=1

# IDM https://github.com/flowable/flowable-engine/tree/main/modules/flowable-spring-boot/flowable-spring-boot-starters/flowable-spring-boot-autoconfigure/src/main/java/org/flowable/spring/boot/idm/FlowableIdmProperties.java
#flowable.idm.enabled=true # Whether the idm engine needs to be started.
#flowable.idm.password-encoder= # The type of the password encoder that needs to be used.
#flowable.idm.servlet.load-on-startup=-1 # Load on startup of the IDM dispatcher servlet.
#flowable.idm.servlet.name=Flowable IDM Rest API # The name of the IDM servlet.
#flowable.idm.servlet.path=/idm-api # The context path for the IDM rest servlet.

# Flowable Http https://github.com/flowable/flowable-engine/tree/main/modules/flowable-spring-boot/flowable-spring-boot-starters/flowable-spring-boot-autoconfigure/src/main/java/org/flowable/spring/boot/FlowableHttpProperties.java
#flowable.http.user-system-properties=false # Whether to use system properties (e.g. http.proxyPort).
#flowable.http.connect-timeout=5s # Connect timeout for the http client
#flowable.http.socket-timeout=5s # Socket timeout for the http client
#flowable.http.connection-request-timeout=5s # Connection Request Timeout for the http client
#flowable.http.request-retry-limit=3 # Request retry limit for the http client
#flowable.http.disable-cert-verify=false # Whether to disable certificate validation for the http client

# ARCHIVED FOR REFERENCE

# Spring Boot has advanced property conversion
# - Durations: java.time.Duration parsed as
#   - default long (milliseconds unless @DurationUnit(ChronoUnit.SECONDS)
#   - standard ISO-8601: P(n)Y(n)M(n)DT(n)H(n)M(n)S, so PT10S for 10s
#   - simplified colloquial: 10s
# - Periods: java.time.Period parsed as
#   - default int (days unless @PeriodUnit(
#   - standard ISO-8601: PnYnMnD and PnW
#   - simplified: 10y1m2w1d
#
# Spring Boot attempts to coerce the external application properties to the right type
# when it binds to the @ConfigurationProperties beans. If you need custom type conversion,
# you can provide a ConversionService bean (with a bean named conversionService) or custom
# property editors (through a CustomEditorConfigurer bean) or custom Converters (with bean
# definitions annotated as @ConfigurationPropertiesBinding).
# See: https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.typesafe-configuration-properties.conversion

