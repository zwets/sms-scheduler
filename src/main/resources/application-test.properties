# TEST profile settings for SMS scheduler

# Common Spring (Boot) Settings
server.port=8182
spring.application.name=sms-scheduler-test

# SmsScheduler application settings
# Set the time zone to use when formmating date-times (default is 'Z' is UTC)
#sms.scheduler.app.time-zone=+03:00

# TEST configuration no jitter and timeout quickly
# Maximum random delay for initial send if not within now plus one minute (avoid batches going all at the same time)
sms.scheduler.config.max-add-jitter=0s
# Duration to wait for send ack after initial queued send
sms.scheduler.config.ack-send-timeout=5s
# Duration to wait with resend after failure
sms.scheduler.config.wait-after-fail=5s
# Duration to wait for recv ack after sending
sms.scheduler.config.ack-recv-timeout=5s

# TEST configuration speed up the async executor
#flowable.process.async-executor-activate=true
# The time the async job acquisition thread will wait to execute the next acquirement query. This happens when no new async jobs were found or when less async jobs have been fetched. Default value = 10 seconds.
flowable.process.async.executor.default-async-job-acquire-wait-time=200ms
# The amount of time an async job is locked when acquired by the async executor. During this period of time, no other async executor will try to acquire and lock this job.
flowable.process.async.executor.async-job-lock-time=500ms
# The time the timer job acquisition thread will wait to execute the next acquirement query. This happens when no new timer jobs were found or when less async jobs have been fetched. Default value = 10 seconds.
flowable.process.async.executor.default-timer-job-acquire-wait-time=200ms
# The amount of time a timer job is locked when acquired by the async executor. During this period of time, no other async executor will try to acquire and lock this job.
flowable.process.async.executor.timer-lock-time=500ms
# The time the async job (both timer and async continuations) acquisition thread will wait when the queue is full to execute the next query.
#flowable.process.async.executor.default-queue-size-full-wait-time=PT5S
#flowable.process.async.executor.max-async-jobs-due-per-acquisition=1

# Bump the Task Executor pool a bit in Test
spring.task.execution.pool.core-size=12
spring.task.execution.pool.max-size=80
#spring.task.execution.pool.queue-capacity=10000
#spring.task.execution.thread-name-prefix=sms-scheduler-task-executor-

# Task scheduling
#spring.task.scheduling.pool.size=5

# SmsScheduler diagnostic settings
# Controls output of the processLogger bean attached to eventListener hooks in the model
sms.scheduler.diag.processes.enabled=true
#sms.scheduler.diag.processes.detailed=true

# Kafka
spring.kafka.bootstrap-servers=localhost:9192
spring.kafka.consumer.group-id=${spring.application.name}
#spring.kafka.consumer.auto-offset-reset=latest
#spring.kafka.listener.missing-topics-fatal=true

# Database config
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.url=jdbc:h2:data/sms-scheduler-db;AUTO_SERVER=TRUE;AUTO_SERVER_PORT=9091;DB_CLOSE_DELAY=-1
#spring.datasource.username=smsscheduler_test
#spring.datasource.password=smsscheduler_test

# Connection pool (see https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby)
#spring.datasource.hikari.poolName=${spring.application.name}
#spring.datasource.hikari.maxLifetime=600000
#spring.datasource.hikari.idleTimeout=300000
#spring.datasource.hikari.minimumIdle=10
#spring.datasource.hikari.maximumPoolSize=50
#spring.datasource.hikari.connection-test-query=select 1

# Mail
#flowable.mail.server.default-from=
#flowable.mail.server.force-to=me@example.org
#flowable.mail.server.host=localhost
#flowable.mail.server.port=25
#flowable.mail.server.ssl-port=1465
#flowable.mail.server.use-ssl=false
#flowable.mail.server.use-tls=false
#flowable.mail.server.username=
#flowable.mail.server.password=

# Flowable says "needed to force use of JDK proxies instead of using CGLIB"
#spring.aop.proxy-target-class=false
#spring.aop.auto=false

# REST
#server.error.include-message=always
#server.error.include-stacktrace=on-param
#server.error.include-binding-errors=on-param

# Actuator endpoint
#management.endpoints.web.exposure.include=*
#management.endpoint.health.show-details=when_authorized
#management.endpoint.health.roles=admins
#management.endpoint.flowable.cache.time-to-live=0ms # Maximum time that a response can be cached.
#management.endpoint.flowable.enabled=true # Whether to enable the flowable endpoint.
# Add arbitrary properties to the info endpoint
#management.info.env.enabled=true
#info.my-custom-prop=${spring.application.name:unknown}


# LOGGING -----------------------------------------------------------------------------------------

# See https://docs.spring.io/spring-boot/docs/2.7.9/reference/html/features.html#features.logging)
#debug=true (same as running with --debug, enables DEBUG level on a number of core loggers)
#trace=true (same as running with --trace, enables TRACE level on a number of core loggers)
logging.level.root=INFO

# SMS Scheduler
logging.level.it.zwets.sms=DEBUG
#logging.level.it.zwets.sms.scheduler=DEBUG
#logging.level.it.zwets.sms.scheduler.iam=INFO

# Diagnostic loggers
# Keep at INFO or lower, and regulate using the sms.scheduler.diag.* properties above.
logging.level.it.zwets.sms.scheduler.diag=INFO

# Flowable
logging.level.org.flowable=INFO
#logging.level.org.flowable.admin=INFO
#logging.level.org.flowable.camel=DEBUG
#logging.level.org.flowable.batch=INFO
#logging.level.org.flowable.engine=INFO
#logging.level.org.flowable.eventregistry=INFO
#logging.level.org.flowable.eventsubscription=INFO
#logging.level.org.flowable.identitylink=INFO
#logging.level.org.flowable.idm=INFO
#logging.level.org.flowable.idm.spring=INFO
#logging.level.org.flowable.job=INFO
#logging.level.org.flowable.spring=INFO
#logging.level.org.flowable.spring.security=DEBUG
#logging.level.org.flowable.task=INFO
#logging.level.org.flowable.variable=INFO

# Loggers triggered periodically, want to keep at INFO to stop log rolling
logging.level.liquibase=WARN

# Kafka
logging.level.org.apache.kafka=INFO
# These log the full Kafka consumer/producer config at INFO
logging.level.org.apache.kafka.clients.consumer.ConsumerConfig=WARN
logging.level.org.apache.kafka.clients.producer.ProducerConfig=WARN

# Camel
logging.level.org.apache.camel=INFO

# Zwets - Spring
logging.level.org.springframework=INFO
#logging.level.org.springframework.jdbc=WARN
#logging.level.org.springframework.web.servlet=WARN
